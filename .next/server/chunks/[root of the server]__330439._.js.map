{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HARDIK/Desktop/Social-Media-Post-Generator-main/src/app/api/generate-post/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\nconst getPromptForPlatform = (\n  platform: string, \n  description: string, \n  makeThread: boolean, \n  wordLimit: number,\n  tone: string,\n  includeHashtags: boolean,\n  includeEmoji: boolean\n) => {\n  const basePrompt = `Write a ${platform} post about: ${description}\n\nKey guidelines:\n- Write in a ${tone.toLowerCase()} tone\n- Aim for approximately ${wordLimit} words\n- Write in a natural, conversational style\n- Use simple, everyday language\n${includeEmoji ? '- Include relevant emojis where appropriate' : '- Do not use any emojis'}\n${includeHashtags ? '- Add relevant hashtags at the end' : '- Do not include any hashtags'}`;\n\n  switch (platform) {\n    case 'instagram':\n      return `${basePrompt}\nAdditional notes:\n- Focus on visual storytelling\n- Keep the tone engaging and authentic\n${includeHashtags ? '- Add 3-5 relevant hashtags at the end' : ''}`;\n    \n    case 'facebook':\n      return `${basePrompt}\nAdditional notes:\n- Write in a personal, engaging style\n- Share insights or experiences naturally\n- Add a subtle call-to-action if relevant\n${includeHashtags ? '- Add 1-2 relevant hashtags if needed' : ''}`;\n    \n    case 'twitter':\n      return makeThread \n        ? `${basePrompt}\nAdditional notes:\n- Break this into 3-5 connected tweets\n- Each tweet should flow naturally into the next\n- Keep each tweet under 280 characters\n- Number each tweet\n- Focus on telling a coherent story across the thread`\n        : `${basePrompt}\nAdditional notes:\n- Keep it under 280 characters\n- Make it engaging and shareable\n${includeHashtags ? '- Add 1-2 relevant hashtags' : ''}`;\n    \n    case 'linkedin':\n      return `${basePrompt}\nAdditional notes:\n- Maintain a professional tone\n- Include industry insights if relevant\n- Focus on value and expertise\n- Keep paragraphs short and scannable\n${includeHashtags ? '- Add 2-3 relevant professional hashtags' : ''}`;\n    \n    default:\n      return basePrompt;\n  }\n};\n\nexport async function POST(req: Request) {\n  try {\n    const { \n      platform, \n      description, \n      makeThread, \n      wordLimit,\n      tone,\n      includeHashtags,\n      includeEmoji,\n    } = await req.json();\n\n    const prompt = getPromptForPlatform(\n      platform, \n      description, \n      makeThread, \n      wordLimit,\n      tone,\n      includeHashtags,\n      includeEmoji\n    );\n\n    const systemPrompt = `You are a skilled social media writer who creates ${tone.toLowerCase()} content that resonates with the audience. Your writing should:\n\n- Maintain a consistent ${tone.toLowerCase()} tone throughout\n- Use natural, conversational language\n- Be concise and impactful\n${includeEmoji ? '- Use emojis thoughtfully and sparingly' : '- Avoid using emojis'}\n${includeHashtags ? '- Include relevant hashtags that add value' : '- Exclude hashtags'}\n- Express emotions and enthusiasm through well-crafted words\n- Focus on creating genuine connections with the audience\n\n${platform === 'linkedin' \n  ? 'For LinkedIn, maintain professionalism while being approachable and authentic.' \n  : platform === 'twitter' && makeThread \n    ? 'For Twitter threads, maintain a natural flow between tweets while keeping each one engaging.' \n    : ''}`;\n\n    const completion = await openai.chat.completions.create({\n      messages: [\n        { \n          role: \"system\", \n          content: systemPrompt\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      model: \"gpt-3.5-turbo\",\n      temperature: 0.7,\n    });\n\n    return NextResponse.json({ content: completion.choices[0].message.content });\n  } catch (error) {\n    console.error('Error:', error);\n    return NextResponse.json(\n      { error: 'Failed to generate content' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ,QAAQ,GAAG,CAAC,cAAc;AACpC;AAEA,MAAM,uBAAuB,CAC3B,UACA,aACA,YACA,WACA,MACA,iBACA;IAEA,MAAM,aAAa,CAAC,QAAQ,EAAE,SAAS,aAAa,EAAE,YAAY;;;aAGvD,EAAE,KAAK,WAAW,GAAG;wBACV,EAAE,UAAU;;;AAGpC,EAAE,eAAe,gDAAgD,0BAA0B;AAC3F,EAAE,kBAAkB,uCAAuC,iCAAiC;IAE1F,OAAQ;QACN,KAAK;YACH,OAAO,GAAG,WAAW;;;;AAI3B,EAAE,kBAAkB,2CAA2C,IAAI;QAE/D,KAAK;YACH,OAAO,GAAG,WAAW;;;;;AAK3B,EAAE,kBAAkB,0CAA0C,IAAI;QAE9D,KAAK;YACH,OAAO,aACH,GAAG,WAAW;;;;;;qDAM6B,CAAC,GAC5C,GAAG,WAAW;;;;AAIxB,EAAE,kBAAkB,gCAAgC,IAAI;QAEpD,KAAK;YACH,OAAO,GAAG,WAAW;;;;;;AAM3B,EAAE,kBAAkB,6CAA6C,IAAI;QAEjE;YACE,OAAO;IACX;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EACJ,QAAQ,EACR,WAAW,EACX,UAAU,EACV,SAAS,EACT,IAAI,EACJ,eAAe,EACf,YAAY,EACb,GAAG,MAAM,IAAI,IAAI;QAElB,MAAM,SAAS,qBACb,UACA,aACA,YACA,WACA,MACA,iBACA;QAGF,MAAM,eAAe,CAAC,kDAAkD,EAAE,KAAK,WAAW,GAAG;;wBAEzE,EAAE,KAAK,WAAW,GAAG;;;AAG7C,EAAE,eAAe,4CAA4C,uBAAuB;AACpF,EAAE,kBAAkB,+CAA+C,qBAAqB;;;;AAIxF,EAAE,aAAa,aACX,mFACA,aAAa,aAAa,aACxB,iGACA,IAAI;QAEN,MAAM,aAAa,MAAM,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtD,UAAU;gBACR;oBACE,MAAM;oBACN,SAAS;gBACX;gBACA;oBACE,MAAM;oBACN,SAAS;gBACX;aACD;YACD,OAAO;YACP,aAAa;QACf;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS,WAAW,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;QAAC;IAC5E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA6B,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}