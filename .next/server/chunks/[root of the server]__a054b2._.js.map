{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HARDIK/Desktop/Social-Media-Post-Generator-main/src/app/api/generate-post/route.ts"],"sourcesContent":["// import { NextResponse } from 'next/server';\n// import OpenAI from 'openai';\n\n// const openai = new OpenAI({\n//   apiKey: process.env.OPENAI_API_KEY,\n// });\n\n// const getPromptForPlatform = (\n//   platform: string, \n//   description: string, \n//   makeThread: boolean, \n//   wordLimit: number,\n//   tone: string,\n//   includeHashtags: boolean,\n//   includeEmoji: boolean\n// ) => {\n//   const basePrompt = `Write a ${platform} post about: ${description}\n\n// Key guidelines:\n// - Write in a ${tone.toLowerCase()} tone\n// - Aim for approximately ${wordLimit} words\n// - Write in a natural, conversational style\n// - Use simple, everyday language\n// ${includeEmoji ? '- Include relevant emojis where appropriate' : '- Do not use any emojis'}\n// ${includeHashtags ? '- Add relevant hashtags at the end' : '- Do not include any hashtags'}`;\n\n//   switch (platform) {\n//     case 'instagram':\n//       return `${basePrompt}\n// Additional notes:\n// - Focus on visual storytelling\n// - Keep the tone engaging and authentic\n// ${includeHashtags ? '- Add 3-5 relevant hashtags at the end' : ''}`;\n    \n//     case 'facebook':\n//       return `${basePrompt}\n// Additional notes:\n// - Write in a personal, engaging style\n// - Share insights or experiences naturally\n// - Add a subtle call-to-action if relevant\n// ${includeHashtags ? '- Add 1-2 relevant hashtags if needed' : ''}`;\n    \n//     case 'twitter':\n//       return makeThread \n//         ? `${basePrompt}\n// Additional notes:\n// - Break this into 3-5 connected tweets\n// - Each tweet should flow naturally into the next\n// - Keep each tweet under 280 characters\n// - Number each tweet\n// - Focus on telling a coherent story across the thread`\n//         : `${basePrompt}\n// Additional notes:\n// - Keep it under 280 characters\n// - Make it engaging and shareable\n// ${includeHashtags ? '- Add 1-2 relevant hashtags' : ''}`;\n    \n//     case 'linkedin':\n//       return `${basePrompt}\n// Additional notes:\n// - Maintain a professional tone\n// - Include industry insights if relevant\n// - Focus on value and expertise\n// - Keep paragraphs short and scannable\n// ${includeHashtags ? '- Add 2-3 relevant professional hashtags' : ''}`;\n    \n//     default:\n//       return basePrompt;\n//   }\n// };\n\n// export async function POST(req: Request) {\n//   try {\n//     const { \n//       platform, \n//       description, \n//       makeThread, \n//       wordLimit,\n//       tone,\n//       includeHashtags,\n//       includeEmoji,\n//     } = await req.json();\n\n//     const prompt = getPromptForPlatform(\n//       platform, \n//       description, \n//       makeThread, \n//       wordLimit,\n//       tone,\n//       includeHashtags,\n//       includeEmoji\n//     );\n\n//     const systemPrompt = `You are a skilled social media writer who creates ${tone.toLowerCase()} content that resonates with the audience. Your writing should:\n\n// - Maintain a consistent ${tone.toLowerCase()} tone throughout\n// - Use natural, conversational language\n// - Be concise and impactful\n// ${includeEmoji ? '- Use emojis thoughtfully and sparingly' : '- Avoid using emojis'}\n// ${includeHashtags ? '- Include relevant hashtags that add value' : '- Exclude hashtags'}\n// - Express emotions and enthusiasm through well-crafted words\n// - Focus on creating genuine connections with the audience\n\n// ${platform === 'linkedin' \n//   ? 'For LinkedIn, maintain professionalism while being approachable and authentic.' \n//   : platform === 'twitter' && makeThread \n//     ? 'For Twitter threads, maintain a natural flow between tweets while keeping each one engaging.' \n//     : ''}`;\n\n//     const completion = await openai.chat.completions.create({\n//       messages: [\n//         { \n//           role: \"system\", \n//           content: systemPrompt\n//         },\n//         {\n//           role: \"user\",\n//           content: prompt\n//         }\n//       ],\n//       model: \"gpt-3.5-turbo\",\n//       temperature: 0.7,\n//     });\n\n//     return NextResponse.json({ content: completion.choices[0].message.content });\n//   } catch (error) {\n//     console.error('Error:', error);\n//     return NextResponse.json(\n//       { error: 'Failed to generate content' },\n//       { status: 500 }\n//     );\n//   }\n// }\n\n\n// gemini\n\n// import { NextResponse } from 'next/server';\n// import { GoogleGenerativeAI } from '@google/generative-ai';\n\n\n\n\n// // Initialize Gemini with your API key\n// const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY as string);\n\n// const getPromptForPlatform = (\n//   platform: string,\n//   description: string,\n//   makeThread: boolean,\n//   wordLimit: number,\n//   tone: string,\n//   includeHashtags: boolean,\n//   includeEmoji: boolean\n// ) => {\n//   const basePrompt = `Write a ${platform} post about: ${description}\n\n// Key guidelines:\n// - Write in a ${tone.toLowerCase()} tone\n// - Aim for approximately ${wordLimit} words\n// - Write in a natural, conversational style\n// - Use simple, everyday language\n// ${includeEmoji ? '- Include relevant emojis where appropriate' : '- Do not use any emojis'}\n// ${includeHashtags ? '- Add relevant hashtags at the end' : '- Do not include any hashtags'}`;\n\n//   switch (platform) {\n//     case 'instagram':\n//       return `${basePrompt}\n// Additional notes:\n// - Focus on visual storytelling\n// - Keep the tone engaging and authentic\n// ${includeHashtags ? '- Add 3-5 relevant hashtags at the end' : ''}`;\n\n//     case 'facebook':\n//       return `${basePrompt}\n// Additional notes:\n// - Write in a personal, engaging style\n// - Share insights or experiences naturally\n// - Add a subtle call-to-action if relevant\n// ${includeHashtags ? '- Add 1-2 relevant hashtags if needed' : ''}`;\n\n//     case 'twitter':\n//       return makeThread\n//         ? `${basePrompt}\n// Additional notes:\n// - Break this into 3-5 connected tweets\n// - Each tweet should flow naturally into the next\n// - Keep each tweet under 280 characters\n// - Number each tweet\n// - Focus on telling a coherent story across the thread`\n//         : `${basePrompt}\n// Additional notes:\n// - Keep it under 280 characters\n// - Make it engaging and shareable\n// ${includeHashtags ? '- Add 1-2 relevant hashtags' : ''}`;\n\n//     case 'linkedin':\n//       return `${basePrompt}\n// Additional notes:\n// - Maintain a professional tone\n// - Include industry insights if relevant\n// - Focus on value and expertise\n// - Keep paragraphs short and scannable\n// ${includeHashtags ? '- Add 2-3 relevant professional hashtags' : ''}`;\n\n//     default:\n//       return basePrompt;\n//   }\n// };\n\n// export async function POST(req: Request) {\n//   try {\n//     const {\n//       platform,\n//       description,\n//       makeThread,\n//       wordLimit,\n//       tone,\n//       includeHashtags,\n//       includeEmoji,\n//     } = await req.json();\n\n//     const prompt = getPromptForPlatform(\n//       platform,\n//       description,\n//       makeThread,\n//       wordLimit,\n//       tone,\n//       includeHashtags,\n//       includeEmoji\n//     );\n\n//     const systemPrompt = `You are a skilled social media writer who creates ${tone.toLowerCase()} content that resonates with the audience. Your writing should:\n\n// - Maintain a consistent ${tone.toLowerCase()} tone throughout\n// - Use natural, conversational language\n// - Be concise and impactful\n// ${includeEmoji ? '- Use emojis thoughtfully and sparingly' : '- Avoid using emojis'}\n// ${includeHashtags ? '- Include relevant hashtags that add value' : '- Exclude hashtags'}\n// - Express emotions and enthusiasm through well-crafted words\n// - Focus on creating genuine connections with the audience\n\n// ${platform === 'linkedin'\n//         ? 'For LinkedIn, maintain professionalism while being approachable and authentic.'\n//         : platform === 'twitter' && makeThread\n//           ? 'For Twitter threads, maintain a natural flow between tweets while keeping each one engaging.'\n//           : ''}`;\n\n//     // ✅ Correct model for v1 API\n//     // const model = genAI.getGenerativeModel({\n//     //   model: 'gemini-1.5-flash-latest',\n//     // });\n// const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n//     const fullPrompt = `${systemPrompt}\\n\\n${prompt}`;\n\n//     // ✅ Correct call method for SDK v0.24.1\n//     const result = await model.generateContent({\n//       contents: [{ role: 'user', parts: [{ text: fullPrompt }] }],\n//     });\n\n//     const response = result.response.text();\n\n//     return NextResponse.json({ content: response });\n//   } catch (error) {\n//     console.error('Error:', error);\n//     return NextResponse.json(\n//       { error: 'Failed to generate content' },\n//       { status: 500 }\n//     );\n//   }\n// }\n\n//testing\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY as string);\n\nexport const config = {\n  api: {\n    bodyParser: {\n      sizeLimit: '15mb', // allow image uploads\n    },\n  },\n};\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const {\n      platform,\n      tone,\n      wordLimit,\n      includeHashtags,\n      includeEmoji,\n      description,\n      imageBase64,\n    } = body;\n\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n    let prompt = \"\";\n\n    // --- Platform-Specific Prompts ---\n    if (platform === \"blog\") {\n      prompt = `\n      Write a detailed blog post on: \"${description || 'a topic inferred from the image'}\".\n      Requirements:\n      - Tone: ${tone}\n      - Word count: around ${wordLimit} words (between 1000–2500)\n      - Include relevant headings and subheadings\n      - Make it well-structured and SEO-friendly\n      - ${includeHashtags ? 'Add 3–5 relevant hashtags at the end' : 'No hashtags'}\n      - ${includeEmoji ? 'Use emojis sparingly where relevant' : 'Avoid emojis'}\n      Only return the blog content.\n      `;\n    } else if ([\"instagram\", \"facebook\"].includes(platform)) {\n      prompt = `\n      You are an expert social media content creator.\n      Create a caption for ${platform}, analyzing the provided ${\n        imageBase64 ? \"image\" : \"description\"\n      }${imageBase64 && description ? \" and description together\" : \"\"}.\n      Guidelines:\n      - Tone: ${tone}\n      - Word limit: ${wordLimit}\n      - ${includeHashtags ? \"Include relevant hashtags\" : \"Do not include hashtags\"}\n      - ${includeEmoji ? \"Use emojis naturally\" : \"Avoid emojis\"}\n      Focus on creating an engaging and context-aware caption.\n      Return only the caption text.\n      `;\n    } else {\n      prompt = `\n      Write a ${platform} post about: ${description}.\n      - Tone: ${tone}\n      - Word limit: ${wordLimit}\n      - ${includeEmoji ? \"Include emojis\" : \"No emojis\"}\n      - ${includeHashtags ? \"Include hashtags\" : \"No hashtags\"}\n      Only output the final text.\n      `;\n    }\n\n    // --- Input parts (text + optional image) ---\n    const inputParts: any[] = [{ text: prompt }];\n\n    if (imageBase64) {\n      inputParts.push({\n        inlineData: {\n          data: imageBase64.split(\",\")[1],\n          mimeType: \"image/jpeg\",\n        },\n      });\n    }\n\n    const result = await model.generateContent({\n      contents: [{ role: \"user\", parts: inputParts }],\n    });\n\n    const response = result.response.text().trim();\n    return new Response(JSON.stringify({ content: response }), { status: 200 });\n  } catch (error) {\n    console.error(\"Error generating post:\", error);\n    return new Response(JSON.stringify({ error: \"Failed to generate content\" }), { status: 500 });\n  }\n}\n\n\n\n\n\n\n\n//gemini updated for the image \n// import { NextResponse } from \"next/server\";\n// import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);\n\n// const getPromptForPlatform = (\n//   platform: string,\n//   description: string,\n//   makeThread: boolean,\n//   wordLimit: number,\n//   tone: string,\n//   includeHashtags: boolean,\n//   includeEmoji: boolean,\n//   numVariations: number\n// ) => {\n//   const basePrompt = description\n//     ? `Write ${numVariations} ${tone.toLowerCase()} ${platform} post variations (each under ${wordLimit} words) about: \"${description}\".`\n//     : `Generate ${numVariations} ${tone.toLowerCase()} ${platform} post variations (each under ${wordLimit} words) based on the uploaded image.`;\n\n//   const notes = {\n//     instagram: `\n// - Focus on visual storytelling\n// - Keep tone engaging and authentic\n// ${includeHashtags ? \"- Add 3-5 relevant hashtags\" : \"\"}\n// ${includeEmoji ? \"- Use emojis naturally\" : \"\"}`,\n\n//     facebook: `\n// - Use a friendly, conversational tone\n// ${includeHashtags ? \"- Add 1-2 relevant hashtags\" : \"\"}\n// ${includeEmoji ? \"- Add emojis where they fit\" : \"\"}`,\n\n//     twitter: makeThread\n//       ? `\n// - Split into 3–5 connected tweets under 280 chars each\n// - Number them (1/n, 2/n)`\n//       : `\n// - Keep under 280 characters\n// ${includeHashtags ? \"- Add 1-2 hashtags\" : \"\"}\n// ${includeEmoji ? \"- Add emojis where they make sense\" : \"\"}`,\n\n//     linkedin: `\n// - Professional yet friendly tone\n// - Include insights or takeaways\n// ${includeHashtags ? \"- Add 2-3 professional hashtags\" : \"\"}`,\n//   };\n\n//   return `${basePrompt}\\n\\nAdditional notes:${notes[platform as keyof typeof notes] ?? \"\"}`;\n// };\n\n// export async function POST(req: Request) {\n//   try {\n//     const {\n//       platform,\n//       description,\n//       makeThread,\n//       wordLimit,\n//       tone,\n//       includeHashtags,\n//       includeEmoji,\n//       imageBase64,\n//       numVariations,\n//     } = await req.json();\n\n//     const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n//     const prompt = getPromptForPlatform(\n//       platform,\n//       description,\n//       makeThread,\n//       wordLimit,\n//       tone,\n//       includeHashtags,\n//       includeEmoji,\n//       numVariations\n//     );\n\n//     const systemPrompt = `You are a skilled social media content creator.\n// Your task: return ${numVariations} short, ready-to-post ${platform} posts.\n// Each variation must:\n// - Match the ${tone.toLowerCase()} tone\n// - Be natural, concise, and engaging\n// ${includeEmoji ? \"- Include emojis where suitable\" : \"- No emojis\"}\n// ${includeHashtags ? \"- Include relevant hashtags\" : \"- No hashtags\"}\n// IMPORTANT: \n// - Do NOT include titles like \"Variation 1\" or \"Post 1\"\n// - Do NOT include markdown, numbering, or formatting.\n// - Separate each post with \"---\" only.`;\n\n//     const contents: any[] = [{ role: \"user\", parts: [{ text: `${systemPrompt}\\n\\n${prompt}` }] }];\n\n//     if (imageBase64) {\n//       const base64Data = imageBase64.split(\",\")[1] || imageBase64;\n//       contents[0].parts.push({\n//         inlineData: { data: base64Data, mimeType: \"image/jpeg\" },\n//       });\n//     }\n\n//     const result = await model.generateContent({ contents });\n//     const response = result.response.text();\n\n//     // 🧹 Clean the text output\n//     const cleanText = response\n//       .replace(/\\*\\*Variation\\s*\\d+\\*\\*:?/gi, \"\")\n//       .replace(/Variation\\s*\\d+:?/gi, \"\")\n//       .replace(/\\*\\*/g, \"\")\n//       .replace(/^[-–—\\s]+/gm, \"\")\n//       .replace(/#+\\s*/g, \"\")\n//       .trim();\n\n//     // Split into individual posts\n//     const variations = cleanText\n//       .split(/---+/)\n//       .map((v) => v.trim())\n//       .filter((v) => v.length > 0);\n\n//     return NextResponse.json({ variations });\n//   } catch (error) {\n//     console.error(\"❌ Error generating content:\", error);\n//     return NextResponse.json({ error: \"Failed to generate content\" }, { status: 500 });\n//   }\n// }\n\n\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}