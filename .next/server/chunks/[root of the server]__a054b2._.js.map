{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/HARDIK/Desktop/Social-Media-Post-Generator-main/src/app/api/generate-post/route.ts"],"sourcesContent":["\r\n//testing\r\n// import { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\n// const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY as string);\r\n\r\n// export const config = {\r\n//   api: {\r\n//     bodyParser: {\r\n//       sizeLimit: '15mb', // allow image uploads\r\n//     },\r\n//   },\r\n// };\r\n\r\n// export async function POST(req: Request) {\r\n//   try {\r\n//     const body = await req.json();\r\n//     const {\r\n//       platform,\r\n//       tone,\r\n//       wordLimit,\r\n//       includeHashtags,\r\n//       includeEmoji,\r\n//       description,\r\n//       imageBase64,\r\n//     } = body;\r\n\r\n//     const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\r\n\r\n//     let prompt = \"\";\r\n\r\n//     // --- Platform-Specific Prompts ---\r\n//     if (platform === \"blog\") {\r\n//       prompt = `\r\n//       Write a detailed blog post on: \"${description || 'a topic inferred from the image'}\".\r\n//       Requirements:\r\n//       - Tone: ${tone}\r\n//       - Word count: around ${wordLimit} words (between 1000–2500)\r\n//       - Include relevant headings and subheadings\r\n//       - Make it well-structured and SEO-friendly\r\n//       - ${includeHashtags ? 'Add 3–5 relevant hashtags at the end' : 'No hashtags'}\r\n//       - ${includeEmoji ? 'Use emojis sparingly where relevant' : 'Avoid emojis'}\r\n//       Only return the blog content.\r\n//       `;\r\n//     } else if ([\"instagram\", \"facebook\",\"linkedin\",\"twitter\"].includes(platform)) {\r\n//       prompt = `\r\n//       You are an expert social media content creator.\r\n//       Create a caption for ${platform}, analyzing the provided ${\r\n//         imageBase64 ? \"image\" : \"description\"\r\n//       }${imageBase64 && description ? \" and description together\" : \"\"}.\r\n//       Guidelines:\r\n//       - Tone: ${tone}\r\n//       - Word limit: ${wordLimit}\r\n//       - ${includeHashtags ? \"Include relevant hashtags\" : \"Do not include hashtags\"}\r\n//       - ${includeEmoji ? \"Use emojis naturally\" : \"Avoid emojis\"}\r\n//       Focus on creating an engaging and context-aware caption.\r\n//       Return only the caption text.\r\n//       `;\r\n//     } else {\r\n//       prompt = `\r\n//       Write a ${platform} post about: ${description}.\r\n//       - Tone: ${tone}\r\n//       - Word limit: ${wordLimit}\r\n//       - ${includeEmoji ? \"Include emojis\" : \"No emojis\"}\r\n//       - ${includeHashtags ? \"Include hashtags\" : \"No hashtags\"}\r\n//       Only output the final text.\r\n//       `;\r\n//     }\r\n\r\n//     // --- Input parts (text + optional image) ---\r\n//     const inputParts: any[] = [{ text: prompt }];\r\n\r\n//     if (imageBase64) {\r\n//       inputParts.push({\r\n//         inlineData: {\r\n//           data: imageBase64.split(\",\")[1],\r\n//           mimeType: \"image/jpeg\",\r\n//         },\r\n//       });\r\n//     }\r\n\r\n//     const result = await model.generateContent({\r\n//       contents: [{ role: \"user\", parts: inputParts }],\r\n//     });\r\n//     const response = result.response.text().trim();\r\n//     return new Response(JSON.stringify({ content: response }), { status: 200 });\r\n//   } catch (error) {\r\n//     console.error(\"Error generating post:\", error);\r\n//     return new Response(JSON.stringify({ error: \"Failed to generate content\" }), { status: 500 });\r\n//   }\r\n// }\r\n\r\n//----re\r\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\r\n\r\nconst genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY as string);\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: {\r\n      sizeLimit: '15mb', // allow image uploads\r\n    },\r\n  },\r\n};\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n    const {\r\n      platform,\r\n      tone,\r\n      wordLimit,\r\n      includeHashtags,\r\n      includeEmoji,\r\n      description,\r\n      imageBase64,\r\n    } = body;\r\n\r\n    const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\r\n\r\n    let prompt = \"\";\r\n\r\n    // --- Platform-Specific Prompts ---\r\n    if (platform === \"blog\") {\r\n      prompt = `\r\n      Write a detailed blog post on: \"${description || 'a topic inferred from the image'}\".\r\n      Requirements:\r\n      - Tone: ${tone}\r\n      - Word count: around ${wordLimit} words (between 1000–2500)\r\n      - Include relevant headings and subheadings\r\n      - Make it well-structured and SEO-friendly\r\n      - ${includeHashtags ? 'Add 3–5 relevant hashtags at the end (with #)' : 'No hashtags'}\r\n      - ${includeEmoji ? 'Use emojis sparingly where relevant' : 'Avoid emojis'}\r\n      Only return the blog content.\r\n      `;\r\n    } else if ([\"instagram\", \"facebook\", \"linkedin\", \"twitter\"].includes(platform)) {\r\n      prompt = `\r\n      You are an expert social media content creator.\r\n      Create a caption for ${platform}, analyzing the provided ${\r\n        imageBase64 ? \"image\" : \"description\"\r\n      }${imageBase64 && description ? \" and description together\" : \"\"}.\r\n      Guidelines:\r\n      - Tone: ${tone}\r\n      - Word limit: ${wordLimit}\r\n      - ${\r\n        includeHashtags\r\n          ? \"Include relevant hashtags at the end (each should begin with #)\"\r\n          : \"Do not include hashtags\"\r\n      }\r\n      - ${includeEmoji ? \"Use emojis naturally\" : \"Avoid emojis\"}\r\n      Focus on creating an engaging and context-aware caption.\r\n      Return only the caption text.\r\n      `;\r\n    } else {\r\n      prompt = `\r\n      Write a ${platform} post about: ${description}.\r\n      - Tone: ${tone}\r\n      - Word limit: ${wordLimit}\r\n      - ${includeEmoji ? \"Include emojis\" : \"No emojis\"}\r\n      - ${includeHashtags ? \"Include hashtags (with #)\" : \"No hashtags\"}\r\n      Only output the final text.\r\n      `;\r\n    }\r\n    // console.log(includeHashtags); \r\n    // --- Input parts (text + optional image) ---\r\n    const inputParts: any[] = [{ text: prompt }];\r\n\r\n    if (imageBase64) {\r\n      inputParts.push({\r\n        inlineData: {\r\n          data: imageBase64.split(\",\")[1],\r\n          mimeType: \"image/jpeg\",\r\n        },\r\n      });\r\n    }\r\n\r\n    const result = await model.generateContent({\r\n      contents: [{ role: \"user\", parts: inputParts }],\r\n    });\r\n\r\n    let response = result.response.text().trim();\r\n\r\n    // ✅ Force hashtags to start with \"#\" if includeHashtags is true\r\n   if (includeHashtags) {\r\n  // Split lines and remove empty ones\r\n  const lines = response.split(\"\\n\").map(line => line.trim()).filter(Boolean);\r\n  let lastLine = lines[lines.length - 1];\r\n\r\n  // Loosen the condition — allow emojis, punctuation, etc.\r\n  if (lastLine && lastLine.split(/\\s+/).length <= 12) {\r\n    // Convert words that aren't already hashtags\r\n    console.log(\"lastline=\",lastLine);\r\n    const hashtags = lastLine\r\n      .split(/\\s+/)\r\n      .filter(Boolean)\r\n      .map(word => {\r\n        // Strip punctuation like commas or periods\r\n        const cleanWord = word.replace(/[^\\w#]/g, \"\");\r\n        return cleanWord.startsWith(\"#\") ? cleanWord : `#${cleanWord}`;\r\n      })\r\n      .join(\" \");\r\n      // console.log(\"hashtags:\",hashtags);\r\n    // Only replace if the line doesn't already contain multiple \"#\"\r\n    \r\n      lines[lines.length - 1] = hashtags;\r\n      // console.log(lines[lines.length-1]);\r\n      response = lines.join(\"\\n\");\r\n    // console.log(response);\r\n  }\r\n  // console.log(response)\r\n  // return new Response(JSON.stringify({ content: response }), { status: 200 });\r\n}\r\n\r\n\r\n    return new Response(JSON.stringify({ content: response }), { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Error generating post:\", error);\r\n    return new Response(\r\n      JSON.stringify({ error: \"Failed to generate content\" }),\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"AACA,SAAS;AACT,8DAA8D;AAE9D,8EAA8E;AAE9E,0BAA0B;AAC1B,WAAW;AACX,oBAAoB;AACpB,kDAAkD;AAClD,SAAS;AACT,OAAO;AACP,KAAK;AAEL,6CAA6C;AAC7C,UAAU;AACV,qCAAqC;AACrC,cAAc;AACd,kBAAkB;AAClB,cAAc;AACd,mBAAmB;AACnB,yBAAyB;AACzB,sBAAsB;AACtB,qBAAqB;AACrB,qBAAqB;AACrB,gBAAgB;AAEhB,6EAA6E;AAE7E,uBAAuB;AAEvB,2CAA2C;AAC3C,iCAAiC;AACjC,mBAAmB;AACnB,8FAA8F;AAC9F,sBAAsB;AACtB,wBAAwB;AACxB,oEAAoE;AACpE,oDAAoD;AACpD,mDAAmD;AACnD,sFAAsF;AACtF,mFAAmF;AACnF,sCAAsC;AACtC,WAAW;AACX,sFAAsF;AACtF,mBAAmB;AACnB,wDAAwD;AACxD,oEAAoE;AACpE,gDAAgD;AAChD,2EAA2E;AAC3E,oBAAoB;AACpB,wBAAwB;AACxB,mCAAmC;AACnC,uFAAuF;AACvF,oEAAoE;AACpE,iEAAiE;AACjE,sCAAsC;AACtC,WAAW;AACX,eAAe;AACf,mBAAmB;AACnB,wDAAwD;AACxD,wBAAwB;AACxB,mCAAmC;AACnC,2DAA2D;AAC3D,kEAAkE;AAClE,oCAAoC;AACpC,WAAW;AACX,QAAQ;AAER,qDAAqD;AACrD,oDAAoD;AAEpD,yBAAyB;AACzB,0BAA0B;AAC1B,wBAAwB;AACxB,6CAA6C;AAC7C,oCAAoC;AACpC,aAAa;AACb,YAAY;AACZ,QAAQ;AAER,mDAAmD;AACnD,yDAAyD;AACzD,UAAU;AACV,sDAAsD;AACtD,mFAAmF;AACnF,sBAAsB;AACtB,sDAAsD;AACtD,qGAAqG;AACrG,MAAM;AACN,IAAI;AAEJ,QAAQ;;;;;AACR;;AAEA,MAAM,QAAQ,IAAI,gKAAA,CAAA,qBAAkB,CAAC,QAAQ,GAAG,CAAC,cAAc;AAExD,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;YACV,WAAW;QACb;IACF;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EACJ,QAAQ,EACR,IAAI,EACJ,SAAS,EACT,eAAe,EACf,YAAY,EACZ,WAAW,EACX,WAAW,EACZ,GAAG;QAEJ,MAAM,QAAQ,MAAM,kBAAkB,CAAC;YAAE,OAAO;QAAmB;QAEnE,IAAI,SAAS;QAEb,oCAAoC;QACpC,IAAI,aAAa,QAAQ;YACvB,SAAS,CAAC;sCACsB,EAAE,eAAe,kCAAkC;;cAE3E,EAAE,KAAK;2BACM,EAAE,UAAU;;;QAG/B,EAAE,kBAAkB,kDAAkD,cAAc;QACpF,EAAE,eAAe,wCAAwC,eAAe;;MAE1E,CAAC;QACH,OAAO,IAAI;YAAC;YAAa;YAAY;YAAY;SAAU,CAAC,QAAQ,CAAC,WAAW;YAC9E,SAAS,CAAC;;2BAEW,EAAE,SAAS,yBAAyB,EACvD,cAAc,UAAU,gBACvB,eAAe,cAAc,8BAA8B,GAAG;;cAEzD,EAAE,KAAK;oBACD,EAAE,UAAU;QACxB,EACA,kBACI,oEACA,0BACL;QACC,EAAE,eAAe,yBAAyB,eAAe;;;MAG3D,CAAC;QACH,OAAO;YACL,SAAS,CAAC;cACF,EAAE,SAAS,aAAa,EAAE,YAAY;cACtC,EAAE,KAAK;oBACD,EAAE,UAAU;QACxB,EAAE,eAAe,mBAAmB,YAAY;QAChD,EAAE,kBAAkB,8BAA8B,cAAc;;MAElE,CAAC;QACH;QACA,iCAAiC;QACjC,8CAA8C;QAC9C,MAAM,aAAoB;YAAC;gBAAE,MAAM;YAAO;SAAE;QAE5C,IAAI,aAAa;YACf,WAAW,IAAI,CAAC;gBACd,YAAY;oBACV,MAAM,YAAY,KAAK,CAAC,IAAI,CAAC,EAAE;oBAC/B,UAAU;gBACZ;YACF;QACF;QAEA,MAAM,SAAS,MAAM,MAAM,eAAe,CAAC;YACzC,UAAU;gBAAC;oBAAE,MAAM;oBAAQ,OAAO;gBAAW;aAAE;QACjD;QAEA,IAAI,WAAW,OAAO,QAAQ,CAAC,IAAI,GAAG,IAAI;QAE1C,gEAAgE;QACjE,IAAI,iBAAiB;YACtB,oCAAoC;YACpC,MAAM,QAAQ,SAAS,KAAK,CAAC,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,IAAI,IAAI,MAAM,CAAC;YACnE,IAAI,WAAW,KAAK,CAAC,MAAM,MAAM,GAAG,EAAE;YAEtC,yDAAyD;YACzD,IAAI,YAAY,SAAS,KAAK,CAAC,OAAO,MAAM,IAAI,IAAI;gBAClD,6CAA6C;gBAC7C,QAAQ,GAAG,CAAC,aAAY;gBACxB,MAAM,WAAW,SACd,KAAK,CAAC,OACN,MAAM,CAAC,SACP,GAAG,CAAC,CAAA;oBACH,2CAA2C;oBAC3C,MAAM,YAAY,KAAK,OAAO,CAAC,WAAW;oBAC1C,OAAO,UAAU,UAAU,CAAC,OAAO,YAAY,CAAC,CAAC,EAAE,WAAW;gBAChE,GACC,IAAI,CAAC;gBACN,qCAAqC;gBACvC,gEAAgE;gBAE9D,KAAK,CAAC,MAAM,MAAM,GAAG,EAAE,GAAG;gBAC1B,sCAAsC;gBACtC,WAAW,MAAM,IAAI,CAAC;YACxB,yBAAyB;YAC3B;QACA,wBAAwB;QACxB,+EAA+E;QACjF;QAGI,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;QAAS,IAAI;YAAE,QAAQ;QAAI;IAC3E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;QAA6B,IACrD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}